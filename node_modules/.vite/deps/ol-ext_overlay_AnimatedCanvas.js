import {
  Base_default
} from "./chunk-MYWZCSP7.js";
import {
  Overlay_default
} from "./chunk-GRPY7IEM.js";
import {
  element_default
} from "./chunk-CIOIU6T4.js";
import "./chunk-VO4GGOEJ.js";
import "./chunk-CNEHRA72.js";
import "./chunk-ZTMKVIRH.js";
import "./chunk-BHVDQB66.js";
import "./chunk-QO3WWC4I.js";
import "./chunk-VJP7GUU3.js";
import "./chunk-ALDHDZL6.js";
import "./chunk-ALJAW5IX.js";
import "./chunk-M3GPVIRK.js";
import "./chunk-EPC4DRVJ.js";
import "./chunk-JGCWMTCG.js";
import "./chunk-IEP2JX4U.js";
import "./chunk-C3SH46N7.js";
import "./chunk-FZBQY24O.js";
import "./chunk-BW4LB5FU.js";
import "./chunk-5D2XPBR2.js";
import "./chunk-PPP4FLHO.js";
import "./chunk-PKIQOAE4.js";
import "./chunk-MWTAL2FJ.js";
import "./chunk-FM44FOIC.js";
import "./chunk-EGHNAM74.js";
import "./chunk-X57ZGWG5.js";
import "./chunk-44TYW2ZM.js";
import "./chunk-KPXKCNFP.js";
import "./chunk-3IXZBSVG.js";
import "./chunk-REEFJELK.js";
import "./chunk-3EZRJ7KS.js";
import "./chunk-QFCIXVZ3.js";
import "./chunk-7M2R3MTJ.js";
import {
  unByKey
} from "./chunk-64N4X4CB.js";
import "./chunk-5RHQVMYD.js";
import "./chunk-EWTE5DHJ.js";

// node_modules/ol-ext/overlay/AnimatedCanvas.js
var ol_Overlay_AnimatedCanvas = class olOverlayAnimatedCanvas extends Overlay_default {
  constructor(options) {
    options = options || {};
    var canvas = element_default.create("CANVAS", {
      className: ((options.className || "") + " ol-animated-overlay").trim()
    });
    super({
      element: canvas,
      stopEvent: false
    });
    this._canvas = canvas;
    this._ctx = this._canvas.getContext("2d");
    this._listener = [];
    this._time = 0;
    this._particuleClass = options.particule || Base_default;
    if (options.createParticule)
      this._createParticule = options.createParticule;
    this._fps = 1e3 / (options.fps || 25);
    var p = this._createParticule();
    this._psize = p.get("size") || [50, 50];
    this.set("density", options.density || 0.5);
    this.set("speed", options.speed || 4);
    this.set("angle", typeof options.angle === "number" ? options.angle : Math.PI / 4);
    if (options.animate !== false)
      this.setAnimation(true);
    document.addEventListener("visibilitychange", (function() {
      this._pause = true;
    }).bind(this));
  }
  /** Set the visibility
   * @param {boolean} b
   */
  setVisible(b) {
    this.element.style.display = b ? "block" : "none";
    if (b)
      this.setAnimation(this.get("animation"));
  }
  /** Get the visibility
   * @return {boolean} b
   */
  getVisible() {
    return this.element.style.display != "none";
  }
  /** No update for this overlay
   */
  updatePixelPosition() {
  }
  /**
   * Set the map instance the overlay is associated with
   * @param {ol.Map} map The map instance.
   */
  setMap(map) {
    this._listener.forEach(function(l) {
      unByKey(l);
    });
    this._listener = [];
    super.setMap(map);
    if (map) {
      var size = map.getSize();
      this._canvas.width = size[0];
      this._canvas.height = size[1];
      this.draw();
      this._listener.push(map.on("change:size", (function() {
        var size2 = map.getSize();
        if (this._canvas.width !== size2[0] || this._canvas.height !== size2[1]) {
          this._canvas.width = size2[0];
          this._canvas.height = size2[1];
          this.draw();
        }
      }).bind(this)));
    }
    this.setAnimation(!!map);
  }
  /** Create particules or return exiting ones
   */
  getParticules() {
    var w = this._psize[0];
    var h = this._psize[1];
    var d = this.get("density") * this._canvas.width * this._canvas.height / w / h << 0;
    if (!this._particules)
      this._particules = [];
    if (d > this._particules.length) {
      for (var i = this._particules.length; i < d; i++) {
        this._particules.push(this._createParticule(this, this.randomCoord()));
      }
    } else {
      this._particules.length = d;
    }
    return this._particules;
  }
  /** Create a particule
   * @private
   */
  _createParticule(overlay, coordinate) {
    return new this._particuleClass({
      overlay,
      coordinate
    });
  }
  /** Get random coordinates on canvas
   */
  randomCoord() {
    return [
      Math.random() * (this._canvas.width + this._psize[0]) - this._psize[0] / 2,
      Math.random() * (this._canvas.height + this._psize[1]) - this._psize[1] / 2
    ];
  }
  /** Draw canvas overlay (draw each particules)
   * @param {number} dt timelapes since last call
   */
  draw(dt) {
    var ctx = this._ctx;
    this.clear();
    ctx.beginPath();
    this.getParticules().forEach((function(p) {
      if (dt) {
        p.update(dt);
        this.testExit(p);
      }
      p.draw(this._ctx);
    }).bind(this));
  }
  /** Test if particule exit the canvas and add it on other side
   * @param {*} p the point to test
   * @param {ol.size} size size of the overlap
   */
  testExit(p) {
    var size = this._psize;
    if (p.coordinate[0] < -size[0]) {
      p.coordinate[0] = this._canvas.width + size[0];
      p.coordinate[1] = Math.random() * (this._canvas.height + size[1]) - size[1] / 2;
    } else if (p.coordinate[0] > this._canvas.width + size[0]) {
      p.coordinate[0] = -size[0];
      p.coordinate[1] = Math.random() * (this._canvas.height + size[1]) - size[1] / 2;
    } else if (p.coordinate[1] < -size[1]) {
      p.coordinate[0] = Math.random() * (this._canvas.width + size[0]) - size[0] / 2;
      p.coordinate[1] = this._canvas.height + size[1];
    } else if (p.coordinate[1] > this._canvas.height + size[1]) {
      p.coordinate[0] = Math.random() * (this._canvas.width + size[0]) - size[0] / 2;
      p.coordinate[1] = -size[1];
    }
  }
  /** Clear canvas
   */
  clear() {
    this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);
  }
  /** Get overlay canvas
   * @return {CanvasElement}
   */
  getCanvas() {
    return this._canvas;
  }
  /** Set canvas animation
   * @param {boolean} anim, default true
   * @api
   */
  setAnimation(anim) {
    anim = anim !== false;
    this.set("animation", anim);
    if (anim) {
      this._pause = true;
      requestAnimationFrame(this._animate.bind(this));
    } else {
      this.dispatchEvent({ type: "animation:stop", time: this._time });
    }
  }
  /**
   * @private
   */
  _animate(time) {
    if (this.getVisible() && this.get("animation")) {
      if (this._pause) {
        requestAnimationFrame((function(time2) {
          this._time = time2;
          requestAnimationFrame(this._animate.bind(this));
        }).bind(this));
      } else {
        if (time - this._time > this._fps) {
          this.draw(time - this._time);
          this._time = time;
        }
        requestAnimationFrame(this._animate.bind(this));
      }
    }
    this._pause = false;
  }
};
var AnimatedCanvas_default = ol_Overlay_AnimatedCanvas;
export {
  AnimatedCanvas_default as default
};
//# sourceMappingURL=ol-ext_overlay_AnimatedCanvas.js.map
