{
  "version": 3,
  "sources": ["../../ol-ext/overlay/AnimatedCanvas.js"],
  "sourcesContent": ["/*\tCopyright (c) 2020 Jean-Marc VIGLINO,\r\n  released under the CeCILL-B license (French BSD license)\r\n  (http://www.cecill.info/licences/Licence_CeCILL-B_V1-en.txt).\r\n*/\r\n\r\nimport ol_Overlay from 'ol/Overlay.js'\r\nimport {unByKey as ol_Observable_unByKey} from 'ol/Observable.js'\r\nimport ol_ext_element from '../util/element.js';\r\nimport ol_particule_Base from '../particule/Base.js';\r\n\r\n/** An overlay to play animations on top of the map\r\n * The overlay define a set of particules animated on top of the map.\r\n * Particules are objects with coordinates.\r\n * They are dawn in a canvas using the draw particule method. \r\n * The update particule method updates the particule position according to the timelapse\r\n *\r\n * @constructor\r\n * @extends {ol_Overlay}\r\n * @param {*} options\r\n *  @param {String} options.className class of the Overlay\r\n *  @param {number} option.density particule density, default .5\r\n *  @param {number} option.speed particule speed, default 4\r\n *  @param {number} option.angle particule angle in radian, default PI/4\r\n *  @param {boolean} options.animate start animation, default true\r\n *  @param {number} options.fps frame per second, default 25\r\n */\r\nvar ol_Overlay_AnimatedCanvas = class olOverlayAnimatedCanvas extends ol_Overlay {\r\n  constructor(options) {\r\n    options = options || {};\r\n\r\n    var canvas = ol_ext_element.create('CANVAS', {\r\n      className: ((options.className || '') + ' ol-animated-overlay').trim()\r\n    });\r\n    super({\r\n      element: canvas,\r\n      stopEvent: false\r\n    });\r\n    \r\n    this._canvas = canvas;\r\n    this._ctx = this._canvas.getContext('2d');\r\n\r\n    this._listener = [];\r\n    this._time = 0;\r\n    this._particuleClass = options.particule || ol_particule_Base;\r\n    if (options.createParticule)\r\n      this._createParticule = options.createParticule;\r\n    // 25fps\r\n    this._fps = 1000 / (options.fps || 25);\r\n\r\n    // Default particules properties\r\n    var p = this._createParticule();\r\n    this._psize = p.get('size') || [50, 50];\r\n    this.set('density', options.density || .5);\r\n    this.set('speed', options.speed || 4);\r\n    this.set('angle', typeof (options.angle) === 'number' ? options.angle : Math.PI / 4);\r\n\r\n    if (options.animate !== false)\r\n      this.setAnimation(true);\r\n\r\n    // Prevent animation when window on background\r\n    document.addEventListener(\"visibilitychange\", function () {\r\n      this._pause = true;\r\n    }.bind(this));\r\n  }\r\n  /** Set the visibility\r\n   * @param {boolean} b\r\n   */\r\n  setVisible(b) {\r\n    this.element.style.display = b ? 'block' : 'none';\r\n    if (b)\r\n      this.setAnimation(this.get('animation'));\r\n  }\r\n  /** Get the visibility\r\n   * @return {boolean} b\r\n   */\r\n  getVisible() {\r\n    return this.element.style.display != 'none';\r\n  }\r\n  /** No update for this overlay\r\n   */\r\n  updatePixelPosition() { }\r\n  /**\r\n   * Set the map instance the overlay is associated with\r\n   * @param {ol.Map} map The map instance.\r\n   */\r\n  setMap(map) {\r\n    /*\r\n    if (this.getMap()) {\r\n      this.getMap().getViewport().querySelector('.ol-overlaycontainer').removeChild(this._canvas);\r\n    }\r\n    */\r\n    this._listener.forEach(function (l) {\r\n      ol_Observable_unByKey(l);\r\n    });\r\n    this._listener = [];\r\n\r\n    super.setMap(map);\r\n\r\n    if (map) {\r\n      var size = map.getSize();\r\n      this._canvas.width = size[0];\r\n      this._canvas.height = size[1];\r\n      this.draw();\r\n      this._listener.push(map.on('change:size', function () {\r\n        var size = map.getSize();\r\n        if (this._canvas.width !== size[0] || this._canvas.height !== size[1]) {\r\n          this._canvas.width = size[0];\r\n          this._canvas.height = size[1];\r\n          this.draw();\r\n        }\r\n      }.bind(this)));\r\n    }\r\n    this.setAnimation(!!map);\r\n  }\r\n  /** Create particules or return exiting ones\r\n   */\r\n  getParticules() {\r\n    var w = this._psize[0];\r\n    var h = this._psize[1];\r\n    var d = (this.get('density') * this._canvas.width * this._canvas.height / w / h) << 0;\r\n    if (!this._particules)\r\n      this._particules = [];\r\n    if (d > this._particules.length) {\r\n      for (var i = this._particules.length; i < d; i++) {\r\n        this._particules.push(this._createParticule(this, this.randomCoord()));\r\n      }\r\n    } else {\r\n      this._particules.length = d;\r\n    }\r\n    return this._particules;\r\n  }\r\n  /** Create a particule\r\n   * @private\r\n   */\r\n  _createParticule(overlay, coordinate) {\r\n    return new this._particuleClass({\r\n      overlay: overlay,\r\n      coordinate: coordinate\r\n    });\r\n  }\r\n  /** Get random coordinates on canvas\r\n   */\r\n  randomCoord() {\r\n    return [\r\n      Math.random() * (this._canvas.width + this._psize[0]) - this._psize[0] / 2,\r\n      Math.random() * (this._canvas.height + this._psize[1]) - this._psize[1] / 2\r\n    ];\r\n  }\r\n  /** Draw canvas overlay (draw each particules)\r\n   * @param {number} dt timelapes since last call\r\n   */\r\n  draw(dt) {\r\n    var ctx = this._ctx;\r\n    this.clear();\r\n    ctx.beginPath();\r\n\r\n    this.getParticules().forEach(function (p) {\r\n      if (dt) {\r\n        p.update(dt);\r\n        this.testExit(p);\r\n      }\r\n      p.draw(this._ctx);\r\n    }.bind(this));\r\n  }\r\n  /** Test if particule exit the canvas and add it on other side\r\n   * @param {*} p the point to test\r\n   * @param {ol.size} size size of the overlap\r\n   */\r\n  testExit(p) {\r\n    var size = this._psize;\r\n    if (p.coordinate[0] < -size[0]) {\r\n      p.coordinate[0] = this._canvas.width + size[0];\r\n      p.coordinate[1] = Math.random() * (this._canvas.height + size[1]) - size[1] / 2;\r\n    } else if (p.coordinate[0] > this._canvas.width + size[0]) {\r\n      p.coordinate[0] = -size[0];\r\n      p.coordinate[1] = Math.random() * (this._canvas.height + size[1]) - size[1] / 2;\r\n    } else if (p.coordinate[1] < -size[1]) {\r\n      p.coordinate[0] = Math.random() * (this._canvas.width + size[0]) - size[0] / 2;\r\n      p.coordinate[1] = this._canvas.height + size[1];\r\n    } else if (p.coordinate[1] > this._canvas.height + size[1]) {\r\n      p.coordinate[0] = Math.random() * (this._canvas.width + size[0]) - size[0] / 2;\r\n      p.coordinate[1] = -size[1];\r\n    }\r\n  }\r\n  /** Clear canvas\r\n   */\r\n  clear() {\r\n    this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\r\n  }\r\n  /** Get overlay canvas\r\n   * @return {CanvasElement}\r\n   */\r\n  getCanvas() {\r\n    return this._canvas;\r\n  }\r\n  /** Set canvas animation\r\n   * @param {boolean} anim, default true\r\n   * @api\r\n   */\r\n  setAnimation(anim) {\r\n    anim = (anim !== false);\r\n    this.set('animation', anim);\r\n    if (anim) {\r\n      this._pause = true;\r\n      requestAnimationFrame(this._animate.bind(this));\r\n    } else {\r\n      this.dispatchEvent({ type: 'animation:stop', time: this._time });\r\n    }\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n  _animate(time) {\r\n    if (this.getVisible() && this.get('animation')) {\r\n      if (this._pause) {\r\n        // reset time\r\n        requestAnimationFrame(function (time) {\r\n          this._time = time;\r\n          requestAnimationFrame(this._animate.bind(this));\r\n        }.bind(this));\r\n      } else {\r\n        // Test fps\r\n        if (time - this._time > this._fps) {\r\n          this.draw(time - this._time);\r\n          this._time = time;\r\n        }\r\n        requestAnimationFrame(this._animate.bind(this));\r\n      }\r\n    }\r\n    this._pause = false;\r\n  }\r\n}\r\n\r\nexport default ol_Overlay_AnimatedCanvas\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,IAAI,4BAA4B,MAAM,gCAAgC,gBAAW;AAAA,EAC/E,YAAY,SAAS;AACnB,cAAU,WAAW,CAAC;AAEtB,QAAI,SAAS,gBAAe,OAAO,UAAU;AAAA,MAC3C,aAAa,QAAQ,aAAa,MAAM,wBAAwB,KAAK;AAAA,IACvE,CAAC;AACD,UAAM;AAAA,MACJ,SAAS;AAAA,MACT,WAAW;AAAA,IACb,CAAC;AAED,SAAK,UAAU;AACf,SAAK,OAAO,KAAK,QAAQ,WAAW,IAAI;AAExC,SAAK,YAAY,CAAC;AAClB,SAAK,QAAQ;AACb,SAAK,kBAAkB,QAAQ,aAAa;AAC5C,QAAI,QAAQ;AACV,WAAK,mBAAmB,QAAQ;AAElC,SAAK,OAAO,OAAQ,QAAQ,OAAO;AAGnC,QAAI,IAAI,KAAK,iBAAiB;AAC9B,SAAK,SAAS,EAAE,IAAI,MAAM,KAAK,CAAC,IAAI,EAAE;AACtC,SAAK,IAAI,WAAW,QAAQ,WAAW,GAAE;AACzC,SAAK,IAAI,SAAS,QAAQ,SAAS,CAAC;AACpC,SAAK,IAAI,SAAS,OAAQ,QAAQ,UAAW,WAAW,QAAQ,QAAQ,KAAK,KAAK,CAAC;AAEnF,QAAI,QAAQ,YAAY;AACtB,WAAK,aAAa,IAAI;AAGxB,aAAS,iBAAiB,qBAAoB,WAAY;AACxD,WAAK,SAAS;AAAA,IAChB,GAAE,KAAK,IAAI,CAAC;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAIA,WAAW,GAAG;AACZ,SAAK,QAAQ,MAAM,UAAU,IAAI,UAAU;AAC3C,QAAI;AACF,WAAK,aAAa,KAAK,IAAI,WAAW,CAAC;AAAA,EAC3C;AAAA;AAAA;AAAA;AAAA,EAIA,aAAa;AACX,WAAO,KAAK,QAAQ,MAAM,WAAW;AAAA,EACvC;AAAA;AAAA;AAAA,EAGA,sBAAsB;AAAA,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA,EAKxB,OAAO,KAAK;AAMV,SAAK,UAAU,QAAQ,SAAU,GAAG;AAClC,cAAsB,CAAC;AAAA,IACzB,CAAC;AACD,SAAK,YAAY,CAAC;AAElB,UAAM,OAAO,GAAG;AAEhB,QAAI,KAAK;AACP,UAAI,OAAO,IAAI,QAAQ;AACvB,WAAK,QAAQ,QAAQ,KAAK,CAAC;AAC3B,WAAK,QAAQ,SAAS,KAAK,CAAC;AAC5B,WAAK,KAAK;AACV,WAAK,UAAU,KAAK,IAAI,GAAG,gBAAe,WAAY;AACpD,YAAIA,QAAO,IAAI,QAAQ;AACvB,YAAI,KAAK,QAAQ,UAAUA,MAAK,CAAC,KAAK,KAAK,QAAQ,WAAWA,MAAK,CAAC,GAAG;AACrE,eAAK,QAAQ,QAAQA,MAAK,CAAC;AAC3B,eAAK,QAAQ,SAASA,MAAK,CAAC;AAC5B,eAAK,KAAK;AAAA,QACZ;AAAA,MACF,GAAE,KAAK,IAAI,CAAC,CAAC;AAAA,IACf;AACA,SAAK,aAAa,CAAC,CAAC,GAAG;AAAA,EACzB;AAAA;AAAA;AAAA,EAGA,gBAAgB;AACd,QAAI,IAAI,KAAK,OAAO,CAAC;AACrB,QAAI,IAAI,KAAK,OAAO,CAAC;AACrB,QAAI,IAAK,KAAK,IAAI,SAAS,IAAI,KAAK,QAAQ,QAAQ,KAAK,QAAQ,SAAS,IAAI,KAAM;AACpF,QAAI,CAAC,KAAK;AACR,WAAK,cAAc,CAAC;AACtB,QAAI,IAAI,KAAK,YAAY,QAAQ;AAC/B,eAAS,IAAI,KAAK,YAAY,QAAQ,IAAI,GAAG,KAAK;AAChD,aAAK,YAAY,KAAK,KAAK,iBAAiB,MAAM,KAAK,YAAY,CAAC,CAAC;AAAA,MACvE;AAAA,IACF,OAAO;AACL,WAAK,YAAY,SAAS;AAAA,IAC5B;AACA,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAIA,iBAAiB,SAAS,YAAY;AACpC,WAAO,IAAI,KAAK,gBAAgB;AAAA,MAC9B;AAAA,MACA;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA,EAGA,cAAc;AACZ,WAAO;AAAA,MACL,KAAK,OAAO,KAAK,KAAK,QAAQ,QAAQ,KAAK,OAAO,CAAC,KAAK,KAAK,OAAO,CAAC,IAAI;AAAA,MACzE,KAAK,OAAO,KAAK,KAAK,QAAQ,SAAS,KAAK,OAAO,CAAC,KAAK,KAAK,OAAO,CAAC,IAAI;AAAA,IAC5E;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAIA,KAAK,IAAI;AACP,QAAI,MAAM,KAAK;AACf,SAAK,MAAM;AACX,QAAI,UAAU;AAEd,SAAK,cAAc,EAAE,SAAQ,SAAU,GAAG;AACxC,UAAI,IAAI;AACN,UAAE,OAAO,EAAE;AACX,aAAK,SAAS,CAAC;AAAA,MACjB;AACA,QAAE,KAAK,KAAK,IAAI;AAAA,IAClB,GAAE,KAAK,IAAI,CAAC;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,SAAS,GAAG;AACV,QAAI,OAAO,KAAK;AAChB,QAAI,EAAE,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG;AAC9B,QAAE,WAAW,CAAC,IAAI,KAAK,QAAQ,QAAQ,KAAK,CAAC;AAC7C,QAAE,WAAW,CAAC,IAAI,KAAK,OAAO,KAAK,KAAK,QAAQ,SAAS,KAAK,CAAC,KAAK,KAAK,CAAC,IAAI;AAAA,IAChF,WAAW,EAAE,WAAW,CAAC,IAAI,KAAK,QAAQ,QAAQ,KAAK,CAAC,GAAG;AACzD,QAAE,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC;AACzB,QAAE,WAAW,CAAC,IAAI,KAAK,OAAO,KAAK,KAAK,QAAQ,SAAS,KAAK,CAAC,KAAK,KAAK,CAAC,IAAI;AAAA,IAChF,WAAW,EAAE,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG;AACrC,QAAE,WAAW,CAAC,IAAI,KAAK,OAAO,KAAK,KAAK,QAAQ,QAAQ,KAAK,CAAC,KAAK,KAAK,CAAC,IAAI;AAC7E,QAAE,WAAW,CAAC,IAAI,KAAK,QAAQ,SAAS,KAAK,CAAC;AAAA,IAChD,WAAW,EAAE,WAAW,CAAC,IAAI,KAAK,QAAQ,SAAS,KAAK,CAAC,GAAG;AAC1D,QAAE,WAAW,CAAC,IAAI,KAAK,OAAO,KAAK,KAAK,QAAQ,QAAQ,KAAK,CAAC,KAAK,KAAK,CAAC,IAAI;AAC7E,QAAE,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC;AAAA,IAC3B;AAAA,EACF;AAAA;AAAA;AAAA,EAGA,QAAQ;AACN,SAAK,KAAK,UAAU,GAAG,GAAG,KAAK,QAAQ,OAAO,KAAK,QAAQ,MAAM;AAAA,EACnE;AAAA;AAAA;AAAA;AAAA,EAIA,YAAY;AACV,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,aAAa,MAAM;AACjB,WAAQ,SAAS;AACjB,SAAK,IAAI,aAAa,IAAI;AAC1B,QAAI,MAAM;AACR,WAAK,SAAS;AACd,4BAAsB,KAAK,SAAS,KAAK,IAAI,CAAC;AAAA,IAChD,OAAO;AACL,WAAK,cAAc,EAAE,MAAM,kBAAkB,MAAM,KAAK,MAAM,CAAC;AAAA,IACjE;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAIA,SAAS,MAAM;AACb,QAAI,KAAK,WAAW,KAAK,KAAK,IAAI,WAAW,GAAG;AAC9C,UAAI,KAAK,QAAQ;AAEf,+BAAsB,SAAUC,OAAM;AACpC,eAAK,QAAQA;AACb,gCAAsB,KAAK,SAAS,KAAK,IAAI,CAAC;AAAA,QAChD,GAAE,KAAK,IAAI,CAAC;AAAA,MACd,OAAO;AAEL,YAAI,OAAO,KAAK,QAAQ,KAAK,MAAM;AACjC,eAAK,KAAK,OAAO,KAAK,KAAK;AAC3B,eAAK,QAAQ;AAAA,QACf;AACA,8BAAsB,KAAK,SAAS,KAAK,IAAI,CAAC;AAAA,MAChD;AAAA,IACF;AACA,SAAK,SAAS;AAAA,EAChB;AACF;AAEA,IAAO,yBAAQ;",
  "names": ["size", "time"]
}
