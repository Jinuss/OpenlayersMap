import {
  Base_default
} from "./chunk-MYWZCSP7.js";
import "./chunk-7M2R3MTJ.js";
import "./chunk-64N4X4CB.js";
import "./chunk-5RHQVMYD.js";
import "./chunk-EWTE5DHJ.js";

// node_modules/ol-ext/particule/Cloud.js
var ol_particule_Cloud = class olparticuleCloud extends Base_default {
  constructor(options) {
    options = options || {};
    super(options);
    this.set("size", [100, 100]);
    var canvas = document.createElement("CANVAS");
    canvas.width = 200;
    canvas.height = 200;
    var ctx = canvas.getContext("2d");
    var grd = this.gradient = ctx.createRadialGradient(50, 50, 0, 50, 50, 50);
    grd.addColorStop(0, "rgba(255,255,255,.2");
    grd.addColorStop(1, "rgba(255,255,255,0");
    this.image = canvas;
    for (var k = 0; k < 7; k++) {
      ctx.save();
      var x = Math.random() * 100;
      var y = Math.random() * 100;
      ctx.translate(x, y);
      ctx.fillStyle = grd;
      ctx.fillRect(0, 0, canvas.width, canvas.height);
      ctx.restore();
    }
  }
  /** Draw the particule
   * @param {CanvasRenderingContext2D } ctx
   */
  draw(ctx) {
    ctx.save();
    ctx.translate(this.coordinate[0], this.coordinate[1]);
    ctx.drawImage(this.image, -this.image.width / 2, -this.image.width / 2);
    ctx.restore();
  }
  /** Update the particule
   * @param {number} dt timelapes since last call
   */
  update(dt) {
    var speed = this.getOverlay().get("speed") * dt / this.getOverlay()._fps;
    var angle = this.getOverlay().get("angle");
    this.coordinate[0] += speed * Math.cos(angle);
    this.coordinate[1] += speed * Math.sin(angle);
  }
};
var Cloud_default = ol_particule_Cloud;
export {
  Cloud_default as default
};
//# sourceMappingURL=ol-ext_particule_Cloud.js.map
