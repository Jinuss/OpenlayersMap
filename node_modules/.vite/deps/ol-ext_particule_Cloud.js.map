{
  "version": 3,
  "sources": ["../../ol-ext/particule/Cloud.js"],
  "sourcesContent": ["/*\r\n  Copyright (c) 2020 Jean-Marc VIGLINO,\r\n  released under the CeCILL-B license (French BSD license)\r\n  (http://www.cecill.info/licences/Licence_CeCILL-B_V1-en.txt).\r\n*/\r\nimport ol_particule_Base from './Base.js'\r\n\r\n/** A cloud particule to display clouds over the map\r\n * @constructor\r\n * @extends {ol_particule_Base}\r\n * @param {*} options\r\n *  @param {ol.Overlay} options.overlay\r\n *  @param {ol.pixel} options.coordinate the position of the particule\r\n */\r\nvar ol_particule_Cloud = class olparticuleCloud extends ol_particule_Base {\r\n  constructor(options) {\r\n    options = options || {};\r\n\r\n    super(options);\r\n\r\n    this.set('size', [100, 100]);\r\n    var canvas = document.createElement('CANVAS');\r\n    canvas.width = 200;\r\n    canvas.height = 200;\r\n    var ctx = canvas.getContext('2d');\r\n    var grd = this.gradient = ctx.createRadialGradient(50, 50, 0, 50, 50, 50);\r\n    grd.addColorStop(0, 'rgba(255,255,255,.2');\r\n    grd.addColorStop(1, 'rgba(255,255,255,0');\r\n\r\n    // Create cloud image\r\n    this.image = canvas;\r\n    for (var k = 0; k < 7; k++) {\r\n      ctx.save();\r\n      var x = Math.random() * 100;\r\n      var y = Math.random() * 100;\r\n      ctx.translate(x, y);\r\n      ctx.fillStyle = grd;\r\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n      ctx.restore();\r\n    }\r\n  }\r\n  /** Draw the particule\r\n   * @param {CanvasRenderingContext2D } ctx\r\n   */\r\n  draw(ctx) {\r\n    ctx.save();\r\n    ctx.translate(this.coordinate[0], this.coordinate[1]);\r\n    ctx.drawImage(this.image, -this.image.width / 2, -this.image.width / 2);\r\n    ctx.restore();\r\n  }\r\n  /** Update the particule\r\n   * @param {number} dt timelapes since last call\r\n   */\r\n  update(dt) {\r\n    var speed = this.getOverlay().get('speed') * dt / this.getOverlay()._fps;\r\n    var angle = this.getOverlay().get('angle');\r\n    this.coordinate[0] += speed * Math.cos(angle);\r\n    this.coordinate[1] += speed * Math.sin(angle);\r\n  }\r\n}\r\n\r\nexport default ol_particule_Cloud\r\n"],
  "mappings": ";;;;;;;;;AAcA,IAAI,qBAAqB,MAAM,yBAAyB,aAAkB;AAAA,EACxE,YAAY,SAAS;AACnB,cAAU,WAAW,CAAC;AAEtB,UAAM,OAAO;AAEb,SAAK,IAAI,QAAQ,CAAC,KAAK,GAAG,CAAC;AAC3B,QAAI,SAAS,SAAS,cAAc,QAAQ;AAC5C,WAAO,QAAQ;AACf,WAAO,SAAS;AAChB,QAAI,MAAM,OAAO,WAAW,IAAI;AAChC,QAAI,MAAM,KAAK,WAAW,IAAI,qBAAqB,IAAI,IAAI,GAAG,IAAI,IAAI,EAAE;AACxE,QAAI,aAAa,GAAG,qBAAqB;AACzC,QAAI,aAAa,GAAG,oBAAoB;AAGxC,SAAK,QAAQ;AACb,aAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AAC1B,UAAI,KAAK;AACT,UAAI,IAAI,KAAK,OAAO,IAAI;AACxB,UAAI,IAAI,KAAK,OAAO,IAAI;AACxB,UAAI,UAAU,GAAG,CAAC;AAClB,UAAI,YAAY;AAChB,UAAI,SAAS,GAAG,GAAG,OAAO,OAAO,OAAO,MAAM;AAC9C,UAAI,QAAQ;AAAA,IACd;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAIA,KAAK,KAAK;AACR,QAAI,KAAK;AACT,QAAI,UAAU,KAAK,WAAW,CAAC,GAAG,KAAK,WAAW,CAAC,CAAC;AACpD,QAAI,UAAU,KAAK,OAAO,CAAC,KAAK,MAAM,QAAQ,GAAG,CAAC,KAAK,MAAM,QAAQ,CAAC;AACtE,QAAI,QAAQ;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAIA,OAAO,IAAI;AACT,QAAI,QAAQ,KAAK,WAAW,EAAE,IAAI,OAAO,IAAI,KAAK,KAAK,WAAW,EAAE;AACpE,QAAI,QAAQ,KAAK,WAAW,EAAE,IAAI,OAAO;AACzC,SAAK,WAAW,CAAC,KAAK,QAAQ,KAAK,IAAI,KAAK;AAC5C,SAAK,WAAW,CAAC,KAAK,QAAQ,KAAK,IAAI,KAAK;AAAA,EAC9C;AACF;AAEA,IAAO,gBAAQ;",
  "names": []
}
