import {
  Base_default
} from "./chunk-MYWZCSP7.js";
import "./chunk-7M2R3MTJ.js";
import "./chunk-64N4X4CB.js";
import "./chunk-5RHQVMYD.js";
import "./chunk-EWTE5DHJ.js";

// node_modules/ol-ext/particule/Rain.js
var ol_particule_Rain = class olparticuleRain extends Base_default {
  constructor(options) {
    options = options || {};
    super(options);
    this.z = Math.floor(Math.random() * 5) + 1;
    var canvas = document.createElement("CANVAS");
    canvas.width = 50;
    canvas.height = 50;
    var ctx = canvas.getContext("2d");
    this.gradient = ctx.createRadialGradient(0, 0, 0, 0, 0, 25);
    this.gradient.addColorStop(0, "rgba(0,0,80,0)");
    this.gradient.addColorStop(1, "rgba(0,0,80,.3)");
  }
  /** Draw the particule
   * @param {CanvasRenderingContext2D } ctx
   */
  draw(ctx) {
    ctx.save();
    var angle = this.getOverlay().get("angle");
    ctx.beginPath();
    var x1 = Math.cos(angle) * 10 * (1 + this.z / 2);
    var y1 = Math.sin(angle) * 10 * (1 + this.z / 2);
    ctx.lineWidth = Math.round(this.z / 2);
    ctx.strokeStyle = this.gradient;
    ctx.translate(this.coordinate[0], this.coordinate[1]);
    ctx.moveTo(0, 0);
    ctx.lineTo(x1, y1);
    ctx.stroke();
    ctx.restore();
  }
  /** Update the particule
   * @param {number} dt timelapes since last call
   */
  update(dt) {
    var dl = this.getOverlay().get("speed") * dt / this.getOverlay()._fps * this.z;
    var angle = this.getOverlay().get("angle");
    this.coordinate[0] += dl * Math.cos(angle);
    this.coordinate[1] += dl * Math.sin(angle);
  }
};
var Rain_default = ol_particule_Rain;
export {
  Rain_default as default
};
//# sourceMappingURL=ol-ext_particule_Rain.js.map
