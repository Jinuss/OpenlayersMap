{
  "version": 3,
  "sources": ["../../ol-ext/particule/Snow.js"],
  "sourcesContent": ["/*\r\n  Copyright (c) 2020 Jean-Marc VIGLINO,\r\n  released under the CeCILL-B license (French BSD license)\r\n  (http://www.cecill.info/licences/Licence_CeCILL-B_V1-en.txt).\r\n*/\r\nimport ol_particule_Base from './Base.js'\r\n\r\n/** Rain particules to display clouds over the map\r\n * @constructor\r\n * @extends {ol_particule_Base}\r\n * @param {*} options\r\n *  @param {ol.Overlay} options.overlay\r\n *  @param {ol.pixel} options.coordinate the position of the particule\r\n */\r\nvar ol_particule_Snow = class olparticuleSnow extends ol_particule_Base {\r\n  constructor(options) {\r\n    options = options || {};\r\n\r\n    super(options);\r\n\r\n    this.z = (Math.floor(Math.random() * 5) + 1) / 5;\r\n    this.angle = Math.random() * Math.PI;\r\n\r\n    // Snow fakes\r\n    var canvas = document.createElement('CANVAS');\r\n    canvas.width = 20;\r\n    canvas.height = 20;\r\n    var ctx = canvas.getContext('2d');\r\n    var grd = ctx.createRadialGradient(10, 10, 0, 10, 10, 10);\r\n    grd.addColorStop(0, \"rgba(255, 255, 255,1)\"); // white\r\n    grd.addColorStop(.8, \"rgba(210, 236, 242,.8)\"); // bluish\r\n    grd.addColorStop(1, \"rgba(237, 247, 249,0)\"); // lighter bluish\r\n\r\n    this.image = canvas;\r\n    ctx.fillStyle = grd;\r\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n  }\r\n  /** Draw the particule\r\n   * @param {CanvasRenderingContext2D } ctx\r\n   */\r\n  draw(ctx) {\r\n    ctx.save();\r\n    ctx.translate(this.coordinate[0], this.coordinate[1]);\r\n    ctx.globalAlpha = .4 + this.z / 2;\r\n    ctx.scale(this.z, this.z);\r\n    ctx.drawImage(this.image, -10, -10);\r\n    ctx.restore();\r\n  }\r\n  /** Update the particule\r\n   * @param {number} dt timelapes since last call\r\n   */\r\n  update(dt) {\r\n    var speed = this.getOverlay().get('speed') * dt / this.getOverlay()._fps * this.z * 5;\r\n    var angle = this.getOverlay().get('angle');\r\n    this.angle = this.angle + dt / this.getOverlay()._fps / 100;\r\n    this.coordinate[0] += Math.sin(this.angle + this.z) * 2 + speed * Math.cos(angle);\r\n    this.coordinate[1] += Math.cos(this.angle) + speed * Math.sin(angle);\r\n  }\r\n}\r\n\r\nexport default ol_particule_Snow\r\n"],
  "mappings": ";;;;;;;;;AAcA,IAAI,oBAAoB,MAAM,wBAAwB,aAAkB;AAAA,EACtE,YAAY,SAAS;AACnB,cAAU,WAAW,CAAC;AAEtB,UAAM,OAAO;AAEb,SAAK,KAAK,KAAK,MAAM,KAAK,OAAO,IAAI,CAAC,IAAI,KAAK;AAC/C,SAAK,QAAQ,KAAK,OAAO,IAAI,KAAK;AAGlC,QAAI,SAAS,SAAS,cAAc,QAAQ;AAC5C,WAAO,QAAQ;AACf,WAAO,SAAS;AAChB,QAAI,MAAM,OAAO,WAAW,IAAI;AAChC,QAAI,MAAM,IAAI,qBAAqB,IAAI,IAAI,GAAG,IAAI,IAAI,EAAE;AACxD,QAAI,aAAa,GAAG,uBAAuB;AAC3C,QAAI,aAAa,KAAI,wBAAwB;AAC7C,QAAI,aAAa,GAAG,uBAAuB;AAE3C,SAAK,QAAQ;AACb,QAAI,YAAY;AAChB,QAAI,SAAS,GAAG,GAAG,OAAO,OAAO,OAAO,MAAM;AAAA,EAChD;AAAA;AAAA;AAAA;AAAA,EAIA,KAAK,KAAK;AACR,QAAI,KAAK;AACT,QAAI,UAAU,KAAK,WAAW,CAAC,GAAG,KAAK,WAAW,CAAC,CAAC;AACpD,QAAI,cAAc,MAAK,KAAK,IAAI;AAChC,QAAI,MAAM,KAAK,GAAG,KAAK,CAAC;AACxB,QAAI,UAAU,KAAK,OAAO,KAAK,GAAG;AAClC,QAAI,QAAQ;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAIA,OAAO,IAAI;AACT,QAAI,QAAQ,KAAK,WAAW,EAAE,IAAI,OAAO,IAAI,KAAK,KAAK,WAAW,EAAE,OAAO,KAAK,IAAI;AACpF,QAAI,QAAQ,KAAK,WAAW,EAAE,IAAI,OAAO;AACzC,SAAK,QAAQ,KAAK,QAAQ,KAAK,KAAK,WAAW,EAAE,OAAO;AACxD,SAAK,WAAW,CAAC,KAAK,KAAK,IAAI,KAAK,QAAQ,KAAK,CAAC,IAAI,IAAI,QAAQ,KAAK,IAAI,KAAK;AAChF,SAAK,WAAW,CAAC,KAAK,KAAK,IAAI,KAAK,KAAK,IAAI,QAAQ,KAAK,IAAI,KAAK;AAAA,EACrE;AACF;AAEA,IAAO,eAAQ;",
  "names": []
}
