import {
  Vector_default,
  all
} from "./chunk-CT5CH2TF.js";
import "./chunk-47JZF4AT.js";
import "./chunk-IEP2JX4U.js";
import "./chunk-C3SH46N7.js";
import "./chunk-FZBQY24O.js";
import "./chunk-LIXTJ5TH.js";
import "./chunk-PG3RSFZX.js";
import "./chunk-WDVUUJVX.js";
import "./chunk-JFXZSSOM.js";
import {
  Feature_default
} from "./chunk-27URL7KE.js";
import {
  Polygon_default
} from "./chunk-X57ZGWG5.js";
import "./chunk-44TYW2ZM.js";
import "./chunk-KPXKCNFP.js";
import "./chunk-3IXZBSVG.js";
import "./chunk-REEFJELK.js";
import "./chunk-3EZRJ7KS.js";
import "./chunk-QFCIXVZ3.js";
import "./chunk-7M2R3MTJ.js";
import "./chunk-64N4X4CB.js";
import "./chunk-5RHQVMYD.js";
import "./chunk-EWTE5DHJ.js";

// node_modules/ol-ext/source/DayNight.js
var ol_source_DayNight = class olsourceDayNight extends Vector_default {
  constructor(options) {
    options = options || {};
    options.strategy = all;
    super(options);
    this.setLoader(this._loader);
    this.set("time", options.time || /* @__PURE__ */ new Date());
    this.set("step", options.step || 1);
  }
  /** Compute the position of the Sun in ecliptic coordinates at julianDay.
   * @see http://en.wikipedia.org/wiki/Position_of_the_Sun
   * @param {number} julianDay
   * @private
   */
  static _sunEclipticPosition(julianDay) {
    var deg2rad = Math.PI / 180;
    var n = julianDay - 2451545;
    var L = 280.46 + 0.9856474 * n;
    L %= 360;
    var g = 357.528 + 0.9856003 * n;
    g %= 360;
    var lambda = L + 1.915 * Math.sin(g * deg2rad) + 0.02 * Math.sin(2 * g * deg2rad);
    var R = 1.00014 - 0.01671 * Math.cos(g * deg2rad) - 14e-4 * Math.cos(2 * g * deg2rad);
    return { lambda, R };
  }
  /**
   * @see http://en.wikipedia.org/wiki/Axial_tilt#Obliquity_of_the_ecliptic_.28Earth.27s_axial_tilt.29
   * @param {number} julianDay
   * @private
   */
  static _eclipticObliquity(julianDay) {
    var n = julianDay - 2451545;
    var T = n / 36525;
    var epsilon = 23.43929111 - T * (46.836769 / 3600 - T * (1831e-7 / 3600 + T * (20034e-7 / 3600 - T * (576e-9 / 3600 - T * 434e-10 / 3600))));
    return epsilon;
  }
  /* Compute the Sun's equatorial position from its ecliptic position.
   * @param {number} sunEclLng sun lon in degrees
   * @param {number} eclObliq secliptic position in degrees
   * @return {number} position in degrees
   * @private
   */
  static _sunEquatorialPosition(sunEclLon, eclObliq) {
    var rad2deg = 180 / Math.PI;
    var deg2rad = Math.PI / 180;
    var alpha = Math.atan(Math.cos(eclObliq * deg2rad) * Math.tan(sunEclLon * deg2rad)) * rad2deg;
    var delta = Math.asin(Math.sin(eclObliq * deg2rad) * Math.sin(sunEclLon * deg2rad)) * rad2deg;
    var lQuadrant = Math.floor(sunEclLon / 90) * 90;
    var raQuadrant = Math.floor(alpha / 90) * 90;
    alpha = alpha + (lQuadrant - raQuadrant);
    return { alpha, delta };
  }
  /** Get the day/night separation latitude
   * @param {number} lon
   * @param {Date} time
   * @returns {number}
   */
  static getNightLat(lon, time) {
    var rad2deg = 180 / Math.PI;
    var deg2rad = Math.PI / 180;
    var date = time ? new Date(time) : /* @__PURE__ */ new Date();
    var julianDay = date / 864e5 + 24405875e-1;
    var gst = (18.697374558 + 24.06570982441908 * (julianDay - 2451545)) % 24;
    var sunEclPos = ol_source_DayNight._sunEclipticPosition(julianDay);
    var eclObliq = ol_source_DayNight._eclipticObliquity(julianDay);
    var sunEqPos = ol_source_DayNight._sunEquatorialPosition(sunEclPos.lambda, eclObliq);
    var ha = gst * 15 + lon - sunEqPos.alpha;
    var lat = Math.atan(-Math.cos(ha * deg2rad) / Math.tan(sunEqPos.delta * deg2rad)) * rad2deg;
    return lat;
  }
  /** Loader
   * @private
   */
  _loader(extent, resolution, projection) {
    var lonlat = this.getCoordinates(this.get("time"));
    var geom = new Polygon_default([lonlat]);
    geom.transform("EPSG:4326", projection);
    this.addFeature(new Feature_default(geom));
  }
  /** Set source date time
   * @param {string|Date} time source date time
   */
  setTime(time) {
    this.set("time", time);
    this.refresh();
  }
  /** Get sun coordinates on earth
   * @param {string} time DateTime string, default yet
   * @returns {ol.coordinate} position in lonlat
   */
  getSunPosition(time) {
    var date = time ? new Date(time) : /* @__PURE__ */ new Date();
    var julianDay = date / 864e5 + 24405875e-1;
    var gst = (18.697374558 + 24.06570982441908 * (julianDay - 2451545)) % 24;
    var sunEclPos = ol_source_DayNight._sunEclipticPosition(julianDay);
    var eclObliq = ol_source_DayNight._eclipticObliquity(julianDay);
    var sunEqPos = ol_source_DayNight._sunEquatorialPosition(sunEclPos.lambda, eclObliq);
    return [sunEqPos.alpha - gst * 15, sunEqPos.delta];
  }
  /** Get night-day separation line
   * @param {string} time DateTime string, default yet
   * @param {string} options use 'line' to get the separation line, 'day' to get the day polygon, 'night' to get the night polygon or 'daynight' to get both polygon, default 'night'
   * @return {Array<ol.Point>|Array<Array<ol.Point>>}
   */
  getCoordinates(time, options) {
    var rad2deg = 180 / Math.PI;
    var deg2rad = Math.PI / 180;
    var date = time ? new Date(time) : /* @__PURE__ */ new Date();
    var julianDay = date / 864e5 + 24405875e-1;
    var gst = (18.697374558 + 24.06570982441908 * (julianDay - 2451545)) % 24;
    var lonlat = [];
    var sunEclPos = ol_source_DayNight._sunEclipticPosition(julianDay);
    var eclObliq = ol_source_DayNight._eclipticObliquity(julianDay);
    var sunEqPos = ol_source_DayNight._sunEquatorialPosition(sunEclPos.lambda, eclObliq);
    var step = this.get("step") || 1;
    for (var i = -180; i <= 180; i += step) {
      var lon = i;
      var ha = gst * 15 + lon - sunEqPos.alpha;
      var lat = Math.atan(-Math.cos(ha * deg2rad) / Math.tan(sunEqPos.delta * deg2rad)) * rad2deg;
      lonlat.push([lon, lat]);
    }
    switch (options) {
      case "line":
        break;
      case "day":
        sunEqPos.delta *= -1;
      default: {
        lat = sunEqPos.delta < 0 ? 90 : -90;
        for (var tlon = 180; tlon >= -180; tlon -= step) {
          lonlat.push([tlon, lat]);
        }
        lonlat.push(lonlat[0]);
        break;
      }
    }
    if (options === "daynight") {
      var day = [];
      lonlat.forEach(function(t) {
        day.push(t.slice());
      });
      day[0][1] = -day[0][1];
      day[day.length - 1][1] = -day[0][1];
      day[day.length - 1][1] = -day[0][1];
      lonlat = [lonlat, day];
    }
    return lonlat;
  }
};
var DayNight_default = ol_source_DayNight;
export {
  DayNight_default as default
};
//# sourceMappingURL=ol-ext_source_DayNight.js.map
