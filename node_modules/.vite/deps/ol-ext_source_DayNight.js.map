{
  "version": 3,
  "sources": ["../../ol-ext/source/DayNight.js"],
  "sourcesContent": ["/*\tCopyright (c) 2018 Jean-Marc VIGLINO, \r\n  released under the CeCILL-B license (French BSD license)\r\n  (http://www.cecill.info/licences/Licence_CeCILL-B_V1-en.txt).\r\n*/\r\n\r\nimport ol_geom_Polygon from 'ol/geom/Polygon.js'\r\nimport ol_Feature from 'ol/Feature.js'\r\nimport ol_source_Vector from 'ol/source/Vector.js'\r\nimport {all as ol_loadingstrategy_all} from 'ol/loadingstrategy.js'\r\n\r\n/** DayNight source: a source to display day/night on a map\r\n * @constructor \r\n * @extends {ol.source.Vector}\r\n * @param {any} options Vector source options\r\n *  @param {string|Date} time source date time\r\n *  @param {number} step step in degree for coordinate precision\r\n */\r\nvar ol_source_DayNight = class olsourceDayNight extends ol_source_Vector {\r\n  constructor(options) {\r\n    options = options || {};\r\n    options.strategy = ol_loadingstrategy_all;\r\n    super(options);\r\n    this.setLoader(this._loader);\r\n    this.set('time', options.time || new Date());\r\n    this.set('step', options.step || 1);\r\n  }\r\n  /** Compute the position of the Sun in ecliptic coordinates at julianDay.\r\n   * @see http://en.wikipedia.org/wiki/Position_of_the_Sun\r\n   * @param {number} julianDay\r\n   * @private\r\n   */\r\n  static _sunEclipticPosition(julianDay) {\r\n    var deg2rad = Math.PI / 180;\r\n    // Days since start of J2000.0\r\n    var n = julianDay - 2451545.0;\r\n    // mean longitude of the Sun\r\n    var L = 280.460 + 0.9856474 * n;\r\n    L %= 360;\r\n    // mean anomaly of the Sun\r\n    var g = 357.528 + 0.9856003 * n;\r\n    g %= 360;\r\n    // ecliptic longitude of Sun\r\n    var lambda = L + 1.915 * Math.sin(g * deg2rad) +\r\n      0.02 * Math.sin(2 * g * deg2rad);\r\n    // distance from Sun in AU\r\n    var R = 1.00014 - 0.01671 * Math.cos(g * deg2rad) -\r\n      0.0014 * Math.cos(2 * g * deg2rad);\r\n    return { lambda: lambda, R: R };\r\n  }\r\n  /**\r\n   * @see http://en.wikipedia.org/wiki/Axial_tilt#Obliquity_of_the_ecliptic_.28Earth.27s_axial_tilt.29\r\n   * @param {number} julianDay\r\n   * @private\r\n   */\r\n  static _eclipticObliquity(julianDay) {\r\n    var n = julianDay - 2451545.0;\r\n    // Julian centuries since J2000.0\r\n    var T = n / 36525;\r\n    var epsilon = 23.43929111 -\r\n      T * (46.836769 / 3600\r\n        - T * (0.0001831 / 3600\r\n          + T * (0.00200340 / 3600\r\n            - T * (0.576e-6 / 3600\r\n              - T * 4.34e-8 / 3600))));\r\n    return epsilon;\r\n  }\r\n  /* Compute the Sun's equatorial position from its ecliptic position.\r\n   * @param {number} sunEclLng sun lon in degrees\r\n   * @param {number} eclObliq secliptic position in degrees\r\n   * @return {number} position in degrees\r\n   * @private\r\n   */\r\n  static _sunEquatorialPosition(sunEclLon, eclObliq) {\r\n    var rad2deg = 180 / Math.PI;\r\n    var deg2rad = Math.PI / 180;\r\n\r\n    var alpha = Math.atan(Math.cos(eclObliq * deg2rad)\r\n      * Math.tan(sunEclLon * deg2rad)) * rad2deg;\r\n    var delta = Math.asin(Math.sin(eclObliq * deg2rad)\r\n      * Math.sin(sunEclLon * deg2rad)) * rad2deg;\r\n\r\n    var lQuadrant = Math.floor(sunEclLon / 90) * 90;\r\n    var raQuadrant = Math.floor(alpha / 90) * 90;\r\n    alpha = alpha + (lQuadrant - raQuadrant);\r\n\r\n    return { alpha: alpha, delta: delta };\r\n  }\r\n  /** Get the day/night separation latitude\r\n   * @param {number} lon\r\n   * @param {Date} time\r\n   * @returns {number}\r\n   */\r\n  static getNightLat(lon, time) {\r\n    var rad2deg = 180 / Math.PI;\r\n    var deg2rad = Math.PI / 180;\r\n\r\n    var date = time ? new Date(time) : new Date();\r\n\r\n    // Calculate the present UTC Julian Date. \r\n    // Function is valid after the beginning of the UNIX epoch 1970-01-01 and ignores leap seconds. \r\n    var julianDay = (date / 86400000) + 2440587.5;\r\n\r\n    // Calculate Greenwich Mean Sidereal Time (low precision equation).\r\n    // http://aa.usno.navy.mil/faq/docs/GAST.php \r\n    var gst = (18.697374558 + 24.06570982441908 * (julianDay - 2451545.0)) % 24;\r\n\r\n    var sunEclPos = ol_source_DayNight._sunEclipticPosition(julianDay);\r\n    var eclObliq = ol_source_DayNight._eclipticObliquity(julianDay);\r\n    var sunEqPos = ol_source_DayNight._sunEquatorialPosition(sunEclPos.lambda, eclObliq);\r\n\r\n    // Hour angle (indegrees) of the sun for a longitude on Earth.\r\n    var ha = (gst * 15 + lon) - sunEqPos.alpha;\r\n    // Latitude     \r\n    var lat = Math.atan(-Math.cos(ha * deg2rad) /\r\n      Math.tan(sunEqPos.delta * deg2rad)) * rad2deg;\r\n\r\n    return lat;\r\n  }\r\n  /** Loader\r\n   * @private\r\n   */\r\n  _loader(extent, resolution, projection) {\r\n    var lonlat = this.getCoordinates(this.get('time'));\r\n    var geom = new ol_geom_Polygon([lonlat]);\r\n    geom.transform('EPSG:4326', projection);\r\n    this.addFeature(new ol_Feature(geom));\r\n  }\r\n  /** Set source date time\r\n   * @param {string|Date} time source date time\r\n   */\r\n  setTime(time) {\r\n    this.set('time', time);\r\n    this.refresh();\r\n  }\r\n  /** Get sun coordinates on earth\r\n   * @param {string} time DateTime string, default yet\r\n   * @returns {ol.coordinate} position in lonlat\r\n   */\r\n  getSunPosition(time) {\r\n    var date = time ? new Date(time) : new Date();\r\n\r\n    // Calculate the present UTC Julian Date. \r\n    // Function is valid after the beginning of the UNIX epoch 1970-01-01 and ignores leap seconds. \r\n    var julianDay = (date / 86400000) + 2440587.5;\r\n\r\n    // Calculate Greenwich Mean Sidereal Time (low precision equation).\r\n    // http://aa.usno.navy.mil/faq/docs/GAST.php \r\n    var gst = (18.697374558 + 24.06570982441908 * (julianDay - 2451545.0)) % 24;\r\n\r\n    var sunEclPos = ol_source_DayNight._sunEclipticPosition(julianDay);\r\n    var eclObliq = ol_source_DayNight._eclipticObliquity(julianDay);\r\n    var sunEqPos = ol_source_DayNight._sunEquatorialPosition(sunEclPos.lambda, eclObliq);\r\n\r\n    return [sunEqPos.alpha - gst * 15, sunEqPos.delta];\r\n  }\r\n  /** Get night-day separation line\r\n   * @param {string} time DateTime string, default yet\r\n   * @param {string} options use 'line' to get the separation line, 'day' to get the day polygon, 'night' to get the night polygon or 'daynight' to get both polygon, default 'night'\r\n   * @return {Array<ol.Point>|Array<Array<ol.Point>>}\r\n   */\r\n  getCoordinates(time, options) {\r\n    var rad2deg = 180 / Math.PI;\r\n    var deg2rad = Math.PI / 180;\r\n\r\n    var date = time ? new Date(time) : new Date();\r\n\r\n    // Calculate the present UTC Julian Date. \r\n    // Function is valid after the beginning of the UNIX epoch 1970-01-01 and ignores leap seconds. \r\n    var julianDay = (date / 86400000) + 2440587.5;\r\n\r\n    // Calculate Greenwich Mean Sidereal Time (low precision equation).\r\n    // http://aa.usno.navy.mil/faq/docs/GAST.php \r\n    var gst = (18.697374558 + 24.06570982441908 * (julianDay - 2451545.0)) % 24;\r\n    var lonlat = [];\r\n\r\n    var sunEclPos = ol_source_DayNight._sunEclipticPosition(julianDay);\r\n    var eclObliq = ol_source_DayNight._eclipticObliquity(julianDay);\r\n    var sunEqPos = ol_source_DayNight._sunEquatorialPosition(sunEclPos.lambda, eclObliq);\r\n\r\n    var step = this.get('step') || 1;\r\n    for (var i = -180; i <= 180; i += step) {\r\n      var lon = i;\r\n      // Hour angle (indegrees) of the sun for a longitude on Earth.\r\n      var ha = (gst * 15 + lon) - sunEqPos.alpha;\r\n      // Latitude     \r\n      var lat = Math.atan(-Math.cos(ha * deg2rad) /\r\n        Math.tan(sunEqPos.delta * deg2rad)) * rad2deg;\r\n      // New point\r\n      lonlat.push([lon, lat]);\r\n    }\r\n    switch (options) {\r\n      case 'line': break;\r\n      case 'day': sunEqPos.delta *= -1;\r\n      // fallthrough\r\n      default: {\r\n        // Close polygon\r\n        lat = (sunEqPos.delta < 0) ? 90 : -90;\r\n        for (var tlon = 180; tlon >= -180; tlon -= step) {\r\n          lonlat.push([tlon, lat]);\r\n        }\r\n        lonlat.push(lonlat[0]);\r\n        break;\r\n      }\r\n    }\r\n    // Return night + day polygon\r\n    if (options === 'daynight') {\r\n      var day = [];\r\n      lonlat.forEach(function (t) { day.push(t.slice()); });\r\n      day[0][1] = -day[0][1];\r\n      day[day.length - 1][1] = -day[0][1];\r\n      day[day.length - 1][1] = -day[0][1];\r\n      lonlat = [lonlat, day];\r\n    }\r\n    // Return polygon\r\n    return lonlat;\r\n  }\r\n}\r\n\r\nexport default ol_source_DayNight\r\n"],
  "mappings": "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",
  "names": []
}
