{
  "version": 3,
  "sources": ["../../ol-ext/util/Worker.js", "../../ol-ext/source/IDW.js"],
  "sourcesContent": ["\r\n/** Worker helper to create a worker from code\r\n * @constructor\r\n * @param {function} mainFn main worker function\r\n * @param {object} options\r\n *  @param {function} [options.onMessage] a callback function to get worker result\r\n */\r\nvar ol_ext_Worker = class olextWorker {\r\n  constructor(mainFn, options) {\r\n    // Convert to function\r\n    var mainStr = mainFn.toString().replace(/^.*\\(/, 'function(');\r\n    var lib = '';\r\n    for (let i in options.lib) {\r\n      lib += '\\nvar ' + i + ' = ' + options.lib[i].toString().replace(/^.*\\(/, 'function(') + ';';\r\n    }\r\n    // Code\r\n    var lines = ['var mainFn = ' + mainStr + lib + `\r\n    self.addEventListener(\"message\", function(event) {\r\n      var result = mainFn(event);\r\n      self.postMessage(result);\r\n    });`];\r\n    // console.log(lines[0])\r\n    this.code_ = URL.createObjectURL(new Blob(lines, { type: 'text/javascript' }));\r\n    this.onMessage_ = options.onMessage;\r\n    this.start();\r\n  }\r\n  /** Terminate current worker and start a new one\r\n   */\r\n  start() {\r\n    if (this.worker)\r\n      this.worker.terminate();\r\n    this.worker = new Worker(this.code_);\r\n    this.worker.addEventListener('message', function (e) {\r\n      this.onMessage_(e.data);\r\n    }.bind(this));\r\n  }\r\n  /** Terminate a worker */\r\n  terminate() {\r\n    this.worker.terminate();\r\n  }\r\n  /** Post a new message to the worker\r\n   * @param {object} message\r\n   * @param {boolean} [restart=false] stop the worker and restart a new one\r\n   */\r\n  postMessage(message, restart) {\r\n    if (restart)\r\n      this.start();\r\n    this.worker.postMessage(message);\r\n  }\r\n  /** Set onMessage callback\r\n   * @param {function} fn a callback function to get worker result\r\n   */\r\n  onMessage(fn) {\r\n    this.onMessage_ = fn;\r\n  }\r\n}\r\n\r\nexport default ol_ext_Worker\r\n", "/*\tCopyright (c) 2021 Jean-Marc VIGLINO, \r\n  released under the CeCILL-B license (French BSD license)\r\n*/\r\nimport ol_source_ImageCanvas from 'ol/source/ImageCanvas.js'\r\nimport ol_ext_Worker from '../util/Worker.js'\r\n\r\n/** Inverse distance weighting interpolated source - Shepard's method\r\n * @see https://en.wikipedia.org/wiki/Inverse_distance_weighting\r\n * @constructor \r\n * @extends {ol_source_ImageCanvas}\r\n * @fire drawstart\r\n * @fire drawend\r\n * @param {*} [options]\r\n *  @param {ol.source.vector} options.source a source to interpolate\r\n *  @param {function} [options.getColor] a function that takes a value and returns a color (as an Array [r,g,b,a])\r\n *  @param {boolean} [options.useWorker=false] use worker to calculate the distance map (may cause flickering on small data sets). Source will fire drawstart, drawend while calculating\r\n *  @param {Object} [options.lib] Functions that will be made available to operations run in a worker\r\n *  @param {number} [options.scale=4] scale factor, use large factor to enhance performances (but minor accuracy)\r\n *  @param {string|function} options.weight The feature attribute to use for the weight or a function that returns a weight from a feature. Weight values should range from 0 to 100. Default use the weight attribute of the feature.\r\n */\r\nvar ol_source_IDW = class olsourceIDW extends ol_source_ImageCanvas {\r\n  constructor(options) {\r\n    options = options || {};\r\n\r\n    // Draw image on canvas\r\n    options.canvasFunction = function (extent, resolution, pixelRatio, size) {\r\n      return this.calculateImage(extent, resolution, pixelRatio, size);\r\n    };\r\n    super(options);\r\n\r\n    this._source = options.source;\r\n    this._canvas = document.createElement('CANVAS');\r\n    this._source.on(['addfeature', 'removefeature', 'clear', 'removefeature'], function () {\r\n      this.changed();\r\n    }.bind(this));\r\n\r\n    if (typeof(options.getColor) === 'function') this.getColor = options.getColor\r\n\r\n    if (options.useWorker) {\r\n      var lib = {\r\n        hue2rgb: this.hue2rgb,\r\n        getColor: this.getColor\r\n      }\r\n      for (let f in options.useWorker) {\r\n        lib[f] = options.useWorker[f];\r\n      }\r\n      this.worker = new ol_ext_Worker(this.computeImage, {\r\n        onMessage: this.onImageData.bind(this),\r\n        lib: lib\r\n      });\r\n    }\r\n    this._position = { extent: [], resolution: 0 };\r\n    this.set('scale', options.scale || 4);\r\n    this._weight = typeof (options.weight) === 'function' ? options.weight : function (f) { return f.get(options.weight || 'weight'); };\r\n  }\r\n  /** Get the source\r\n   */\r\n  getSource() {\r\n    return this._source;\r\n  }\r\n  /** Apply the value to the map RGB. Overwrite this function to set your own colors.\r\n   * @param {number} v value\r\n   * @param {Uint8ClampedArray} data RGBA array\r\n   * @param {number} i index in the RGBA array\r\n   * @api\r\n   * /\r\n  setData(v, data, i) {\r\n    // Get color\r\n    var color = this.getColor(v);\r\n    // Convert to RGB\r\n    data[i] = color[0];\r\n    data[i + 1] = color[1];\r\n    data[i + 2] = color[2];\r\n    data[i + 3] = color[3];\r\n  }\r\n  /** Get image value at coord (RGBA)\r\n   * @param {l.coordinate} coord\r\n   * @return {Uint8ClampedArray}\r\n   */\r\n  getValue(coord) {\r\n    if (!this._canvas) return null;\r\n    var pt = this.transform(coord);\r\n    var v = this._canvas.getContext('2d').getImageData(Math.round(pt[0]), Math.round(pt[1]), 1, 1).data;\r\n    return (v);\r\n  }\r\n  /** Convert hue to rgb factor\r\n   * @param {number} h\r\n   * @return {number}\r\n   * @private\r\n   */\r\n  hue2rgb(h) {\r\n    h = (h + 6) % 6;\r\n    if (h < 1) return Math.round(h * 255);\r\n    if (h < 3) return 255;\r\n    if (h < 4) return Math.round((4 - h) * 255);\r\n    return 0;\r\n  }\r\n  /** Get color for a value. Return an array of RGBA values.\r\n   * @param {number} v value\r\n   * @returns {Array<number>}\r\n   * @api\r\n   */\r\n  getColor(v) {\r\n    // Get hue\r\n    var h = 4 - (0.04 * v);\r\n    // Convert to RGB\r\n    return [\r\n      this.hue2rgb(h + 2),\r\n      this.hue2rgb(h),\r\n      this.hue2rgb(h - 2),\r\n      255\r\n    ];\r\n  }\r\n  /** Compute image data\r\n   * @param {Object} e\r\n   */\r\n  computeImage(e) {\r\n    var pts = e.data.pts;\r\n    var width = e.data.width;\r\n    var height = e.data.height;\r\n    var imageData = new Uint8ClampedArray(width * height * 4);\r\n    // Compute image\r\n    var x, y;\r\n    for (y = 0; y < height; y++) {\r\n      for (x = 0; x < width; x++) {\r\n        var t = 0, b = 0;\r\n        for (var i = 0; i < pts.length; ++i) {\r\n          var dx = x - pts[i][0];\r\n          var dy = y - pts[i][1];\r\n          var d = dx * dx + dy * dy;\r\n\r\n          // Inverse distance weighting - Shepard's method\r\n          if (d === 0) {\r\n            b = 1;\r\n            t = pts[i][2];\r\n            break;\r\n          }\r\n          var inv = 1 / (d * d);\r\n          t += inv * pts[i][2];\r\n          b += inv;\r\n        }\r\n        // Set color\r\n        var color = this.getColor(t / b);\r\n        // Convert to RGB\r\n        var pos = (y * width + x) * 4;\r\n        imageData[pos] = color[0];\r\n        imageData[pos + 1] = color[1];\r\n        imageData[pos + 2] = color[2];\r\n        imageData[pos + 3] = color[3];\r\n      }\r\n    }\r\n    return { type: 'image', data: imageData, width: width, height: height };\r\n  }\r\n  /** Calculate IDW at extent / resolution\r\n   * @param {ol/extent/Extent} extent\r\n   * @param {number} resolution\r\n   * @param {number} pixelRatio\r\n   * @param {ol/size/Size} size\r\n   * @return {HTMLCanvasElement}\r\n   * @private\r\n   */\r\n  calculateImage(extent, resolution, pixelRatio, size) {\r\n    if (!this._source) return this._canvas;\r\n    if (this._updated) {\r\n      this._updated = false;\r\n      return this._canvas;\r\n    }\r\n\r\n    // Calculation canvas at small resolution\r\n    var width = Math.round(size[0] / (this.get('scale') * pixelRatio));\r\n    var height = Math.round(size[1] / (this.get('scale') * pixelRatio));\r\n\r\n    // Transform coords to pixel / value\r\n    var pts = [];\r\n    var dw = width / (extent[2] - extent[0]);\r\n    var dh = height / (extent[1] - extent[3]);\r\n    var tr = this.transform = function (xy, v) {\r\n      return [\r\n        (xy[0] - extent[0]) * dw,\r\n        (xy[1] - extent[3]) * dh,\r\n        v\r\n      ];\r\n    };\r\n    // Get features / weight\r\n    this._source.getFeatures().forEach(function (f) {\r\n      pts.push(tr(f.getGeometry().getFirstCoordinate(), this._weight(f)));\r\n    }.bind(this));\r\n\r\n    if (this.worker) {\r\n      // kill old worker and star new one\r\n      this.worker.postMessage({ pts: pts, width: width, height: height }, true);\r\n      this.dispatchEvent({ type: 'drawstart' });\r\n      // Move the canvas position meanwhile\r\n      if (this._canvas.width !== Math.round(size[0])\r\n        || this._canvas.height !== Math.round(size[1])\r\n        || this._position.resolution !== resolution\r\n        || this._position.extent[0] !== extent[0]\r\n        || this._position.extent[1] !== extent[1]) {\r\n        this._canvas.width = Math.round(size[0]);\r\n        this._canvas.height = Math.round(size[1]);\r\n      }\r\n      this._position.extent = extent;\r\n      this._position.resolution = resolution;\r\n    } else {\r\n      this._canvas.width = Math.round(size[0]);\r\n      this._canvas.height = Math.round(size[1]);\r\n      var imageData = this.computeImage({ data: { pts: pts, width: width, height: height } });\r\n      this.onImageData(imageData);\r\n    }\r\n\r\n    return this._canvas;\r\n  }\r\n  /** Display data when ready\r\n   * @private\r\n   */\r\n  onImageData(imageData) {\r\n    // Calculation canvas at small resolution\r\n    var canvas = this._internal = document.createElement('CANVAS');\r\n    canvas.width = imageData.width;\r\n    canvas.height = imageData.height;\r\n    var ctx = canvas.getContext('2d');\r\n    ctx.putImageData(new ImageData(imageData.data, imageData.width, imageData.height), 0, 0);\r\n\r\n    // Draw full resolution canvas\r\n    this._canvas.getContext('2d').drawImage(canvas, 0, 0, this._canvas.width, this._canvas.height);\r\n    // Force redraw\r\n    if (this.worker) {\r\n      this.dispatchEvent({ type: 'drawend' });\r\n      this._updated = true;\r\n      this.changed();\r\n    }\r\n  }\r\n}\r\n\r\nexport default ol_source_IDW\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAOA,IAAI,gBAAgB,MAAM,YAAY;AAAA,EACpC,YAAY,QAAQ,SAAS;AAE3B,QAAI,UAAU,OAAO,SAAS,EAAE,QAAQ,SAAS,WAAW;AAC5D,QAAI,MAAM;AACV,aAAS,KAAK,QAAQ,KAAK;AACzB,aAAO,WAAW,IAAI,QAAQ,QAAQ,IAAI,CAAC,EAAE,SAAS,EAAE,QAAQ,SAAS,WAAW,IAAI;AAAA,IAC1F;AAEA,QAAI,QAAQ,CAAC,kBAAkB,UAAU,MAAM;AAAA;AAAA;AAAA;AAAA,QAI3C;AAEJ,SAAK,QAAQ,IAAI,gBAAgB,IAAI,KAAK,OAAO,EAAE,MAAM,kBAAkB,CAAC,CAAC;AAC7E,SAAK,aAAa,QAAQ;AAC1B,SAAK,MAAM;AAAA,EACb;AAAA;AAAA;AAAA,EAGA,QAAQ;AACN,QAAI,KAAK;AACP,WAAK,OAAO,UAAU;AACxB,SAAK,SAAS,IAAI,OAAO,KAAK,KAAK;AACnC,SAAK,OAAO,iBAAiB,YAAW,SAAU,GAAG;AACnD,WAAK,WAAW,EAAE,IAAI;AAAA,IACxB,GAAE,KAAK,IAAI,CAAC;AAAA,EACd;AAAA;AAAA,EAEA,YAAY;AACV,SAAK,OAAO,UAAU;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,YAAY,SAAS,SAAS;AAC5B,QAAI;AACF,WAAK,MAAM;AACb,SAAK,OAAO,YAAY,OAAO;AAAA,EACjC;AAAA;AAAA;AAAA;AAAA,EAIA,UAAU,IAAI;AACZ,SAAK,aAAa;AAAA,EACpB;AACF;AAEA,IAAO,iBAAQ;;;ACrCf,IAAI,gBAAgB,MAAM,oBAAoB,oBAAsB;AAAA,EAClE,YAAY,SAAS;AACnB,cAAU,WAAW,CAAC;AAGtB,YAAQ,iBAAiB,SAAU,QAAQ,YAAY,YAAY,MAAM;AACvE,aAAO,KAAK,eAAe,QAAQ,YAAY,YAAY,IAAI;AAAA,IACjE;AACA,UAAM,OAAO;AAEb,SAAK,UAAU,QAAQ;AACvB,SAAK,UAAU,SAAS,cAAc,QAAQ;AAC9C,SAAK,QAAQ,GAAG,CAAC,cAAc,iBAAiB,SAAS,eAAe,IAAG,WAAY;AACrF,WAAK,QAAQ;AAAA,IACf,GAAE,KAAK,IAAI,CAAC;AAEZ,QAAI,OAAO,QAAQ,aAAc,WAAY,MAAK,WAAW,QAAQ;AAErE,QAAI,QAAQ,WAAW;AACrB,UAAI,MAAM;AAAA,QACR,SAAS,KAAK;AAAA,QACd,UAAU,KAAK;AAAA,MACjB;AACA,eAAS,KAAK,QAAQ,WAAW;AAC/B,YAAI,CAAC,IAAI,QAAQ,UAAU,CAAC;AAAA,MAC9B;AACA,WAAK,SAAS,IAAI,eAAc,KAAK,cAAc;AAAA,QACjD,WAAW,KAAK,YAAY,KAAK,IAAI;AAAA,QACrC;AAAA,MACF,CAAC;AAAA,IACH;AACA,SAAK,YAAY,EAAE,QAAQ,CAAC,GAAG,YAAY,EAAE;AAC7C,SAAK,IAAI,SAAS,QAAQ,SAAS,CAAC;AACpC,SAAK,UAAU,OAAQ,QAAQ,WAAY,aAAa,QAAQ,SAAS,SAAU,GAAG;AAAE,aAAO,EAAE,IAAI,QAAQ,UAAU,QAAQ;AAAA,IAAG;AAAA,EACpI;AAAA;AAAA;AAAA,EAGA,YAAY;AACV,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAoBA,SAAS,OAAO;AACd,QAAI,CAAC,KAAK,QAAS,QAAO;AAC1B,QAAI,KAAK,KAAK,UAAU,KAAK;AAC7B,QAAI,IAAI,KAAK,QAAQ,WAAW,IAAI,EAAE,aAAa,KAAK,MAAM,GAAG,CAAC,CAAC,GAAG,KAAK,MAAM,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,EAAE;AAC/F,WAAQ;AAAA,EACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,QAAQ,GAAG;AACT,SAAK,IAAI,KAAK;AACd,QAAI,IAAI,EAAG,QAAO,KAAK,MAAM,IAAI,GAAG;AACpC,QAAI,IAAI,EAAG,QAAO;AAClB,QAAI,IAAI,EAAG,QAAO,KAAK,OAAO,IAAI,KAAK,GAAG;AAC1C,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,SAAS,GAAG;AAEV,QAAI,IAAI,IAAK,OAAO;AAEpB,WAAO;AAAA,MACL,KAAK,QAAQ,IAAI,CAAC;AAAA,MAClB,KAAK,QAAQ,CAAC;AAAA,MACd,KAAK,QAAQ,IAAI,CAAC;AAAA,MAClB;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAIA,aAAa,GAAG;AACd,QAAI,MAAM,EAAE,KAAK;AACjB,QAAI,QAAQ,EAAE,KAAK;AACnB,QAAI,SAAS,EAAE,KAAK;AACpB,QAAI,YAAY,IAAI,kBAAkB,QAAQ,SAAS,CAAC;AAExD,QAAI,GAAG;AACP,SAAK,IAAI,GAAG,IAAI,QAAQ,KAAK;AAC3B,WAAK,IAAI,GAAG,IAAI,OAAO,KAAK;AAC1B,YAAI,IAAI,GAAG,IAAI;AACf,iBAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,EAAE,GAAG;AACnC,cAAI,KAAK,IAAI,IAAI,CAAC,EAAE,CAAC;AACrB,cAAI,KAAK,IAAI,IAAI,CAAC,EAAE,CAAC;AACrB,cAAI,IAAI,KAAK,KAAK,KAAK;AAGvB,cAAI,MAAM,GAAG;AACX,gBAAI;AACJ,gBAAI,IAAI,CAAC,EAAE,CAAC;AACZ;AAAA,UACF;AACA,cAAI,MAAM,KAAK,IAAI;AACnB,eAAK,MAAM,IAAI,CAAC,EAAE,CAAC;AACnB,eAAK;AAAA,QACP;AAEA,YAAI,QAAQ,KAAK,SAAS,IAAI,CAAC;AAE/B,YAAI,OAAO,IAAI,QAAQ,KAAK;AAC5B,kBAAU,GAAG,IAAI,MAAM,CAAC;AACxB,kBAAU,MAAM,CAAC,IAAI,MAAM,CAAC;AAC5B,kBAAU,MAAM,CAAC,IAAI,MAAM,CAAC;AAC5B,kBAAU,MAAM,CAAC,IAAI,MAAM,CAAC;AAAA,MAC9B;AAAA,IACF;AACA,WAAO,EAAE,MAAM,SAAS,MAAM,WAAW,OAAc,OAAe;AAAA,EACxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,eAAe,QAAQ,YAAY,YAAY,MAAM;AACnD,QAAI,CAAC,KAAK,QAAS,QAAO,KAAK;AAC/B,QAAI,KAAK,UAAU;AACjB,WAAK,WAAW;AAChB,aAAO,KAAK;AAAA,IACd;AAGA,QAAI,QAAQ,KAAK,MAAM,KAAK,CAAC,KAAK,KAAK,IAAI,OAAO,IAAI,WAAW;AACjE,QAAI,SAAS,KAAK,MAAM,KAAK,CAAC,KAAK,KAAK,IAAI,OAAO,IAAI,WAAW;AAGlE,QAAI,MAAM,CAAC;AACX,QAAI,KAAK,SAAS,OAAO,CAAC,IAAI,OAAO,CAAC;AACtC,QAAI,KAAK,UAAU,OAAO,CAAC,IAAI,OAAO,CAAC;AACvC,QAAI,KAAK,KAAK,YAAY,SAAU,IAAI,GAAG;AACzC,aAAO;AAAA,SACJ,GAAG,CAAC,IAAI,OAAO,CAAC,KAAK;AAAA,SACrB,GAAG,CAAC,IAAI,OAAO,CAAC,KAAK;AAAA,QACtB;AAAA,MACF;AAAA,IACF;AAEA,SAAK,QAAQ,YAAY,EAAE,SAAQ,SAAU,GAAG;AAC9C,UAAI,KAAK,GAAG,EAAE,YAAY,EAAE,mBAAmB,GAAG,KAAK,QAAQ,CAAC,CAAC,CAAC;AAAA,IACpE,GAAE,KAAK,IAAI,CAAC;AAEZ,QAAI,KAAK,QAAQ;AAEf,WAAK,OAAO,YAAY,EAAE,KAAU,OAAc,OAAe,GAAG,IAAI;AACxE,WAAK,cAAc,EAAE,MAAM,YAAY,CAAC;AAExC,UAAI,KAAK,QAAQ,UAAU,KAAK,MAAM,KAAK,CAAC,CAAC,KACxC,KAAK,QAAQ,WAAW,KAAK,MAAM,KAAK,CAAC,CAAC,KAC1C,KAAK,UAAU,eAAe,cAC9B,KAAK,UAAU,OAAO,CAAC,MAAM,OAAO,CAAC,KACrC,KAAK,UAAU,OAAO,CAAC,MAAM,OAAO,CAAC,GAAG;AAC3C,aAAK,QAAQ,QAAQ,KAAK,MAAM,KAAK,CAAC,CAAC;AACvC,aAAK,QAAQ,SAAS,KAAK,MAAM,KAAK,CAAC,CAAC;AAAA,MAC1C;AACA,WAAK,UAAU,SAAS;AACxB,WAAK,UAAU,aAAa;AAAA,IAC9B,OAAO;AACL,WAAK,QAAQ,QAAQ,KAAK,MAAM,KAAK,CAAC,CAAC;AACvC,WAAK,QAAQ,SAAS,KAAK,MAAM,KAAK,CAAC,CAAC;AACxC,UAAI,YAAY,KAAK,aAAa,EAAE,MAAM,EAAE,KAAU,OAAc,OAAe,EAAE,CAAC;AACtF,WAAK,YAAY,SAAS;AAAA,IAC5B;AAEA,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAIA,YAAY,WAAW;AAErB,QAAI,SAAS,KAAK,YAAY,SAAS,cAAc,QAAQ;AAC7D,WAAO,QAAQ,UAAU;AACzB,WAAO,SAAS,UAAU;AAC1B,QAAI,MAAM,OAAO,WAAW,IAAI;AAChC,QAAI,aAAa,IAAI,UAAU,UAAU,MAAM,UAAU,OAAO,UAAU,MAAM,GAAG,GAAG,CAAC;AAGvF,SAAK,QAAQ,WAAW,IAAI,EAAE,UAAU,QAAQ,GAAG,GAAG,KAAK,QAAQ,OAAO,KAAK,QAAQ,MAAM;AAE7F,QAAI,KAAK,QAAQ;AACf,WAAK,cAAc,EAAE,MAAM,UAAU,CAAC;AACtC,WAAK,WAAW;AAChB,WAAK,QAAQ;AAAA,IACf;AAAA,EACF;AACF;AAEA,IAAO,cAAQ;",
  "names": []
}
